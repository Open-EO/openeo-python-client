"""
Simple script to generate process-to-method mapping page.

Usage: run this script and redirect to rst file:

    python process_mapping.py > process_mapping.rst

"""
import datetime
import sys
from textwrap import dedent
import importlib

from openeo.internal.documentation import _process_registry


# TODO: automate running of this tool. E.g. use https://nedbatchelder.com/code/cog
# TODO: support operators properly (use `+` in docs instead of `__add__`)


def main():
    print(dedent(f"""
        ..
            !Warning! This is an auto-generated file.
            Do not edit directly.
            Generated from: {sys.argv}

        .. _openeo_process_mapping:

        openEO Process Mapping
        #######################

        The table below maps openEO processes to the corresponding
        method or function in the openEO Python Client Library.

        .. list-table::
            :header-rows: 1

            *   - openEO process
                - openEO Python Client Method
    """))
    # Import some submodules to make sure `_process_registry` is populated
    for mod in [
        "openeo.rest.datacube",
        "openeo.rest.vectorcube",
        "openeo.rest.mlmodel",
        "openeo.processes",
    ]:
        importlib.import_module(mod)

    for process_id in sorted(_process_registry.keys()):
        functions = [x[0] for x in _process_registry[process_id]]
        refs = [
            f":py:meth:`{f.__qualname__}() <{f.__module__}.{f.__qualname__}>`"
            for f in functions
        ]

        print(f"    *   - `{process_id} <https://processes.openeo.org/#{process_id}>`_")
        print(f"        -", ", ".join(refs))

    print()
    print(f":subscript:`(Table autogenerated on {datetime.date.today().isoformat()})`")


if __name__ == "__main__":
    main()
